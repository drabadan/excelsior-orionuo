const CONSTANTS = {
  TYPES: {
    TINKER_TOOLS: 0x1eb8,
    SHOVEL: 0x0f39,
    INGOT: 0x1bf2,
    HAMMER: 0x13e4,
  },
  WAIT_TIME: {
    LONG_MS: 10000,
    NORMAL: 5000,
    SHORT: 2000,
  },
  BS_GUMP: {
    SMELT_BUTTON: 14,
  },
  TINKER_GUMP: {
    HAMMER_BUTTON: 49,
  },
}

const PRIORITIES = {
  HIGH: 0,
  MEDIUM: 1,
  LOW: 2,
}

/**
 * Prints message to UOClient
 * @param {string} msg - message to print
 */
function print(msg) {
  Orion.Print(0x0035, msg)
}

/**
 * @callback Predicate
 * @returns {boolean}
 *
 * @typedef {Object} Action
 * @property {string} label
 * @property {number} priority
 * @property {Function} executor
 * @property {Predicate} condition
 */
var Action = {
  label: '',
  priority: -1,
  executor: function () {},
  condition: function () {
    return false
  },
}

/**
 * Action constructor
 *
 * @param {string} label name of the Action
 * @param {number} priority priority in running High - 0, Medium - 1, Low - 2
 * @param {Function} executor something that should be done by script,
 * ie - to Hide (use skill Hiding)
 * @param {Function} condition getter for some conditional expression,
 * if condition is met then executor will run itself, else - log that it's skipped
 * @returns {Action} Action
 */
const action = function (label, priority, executor, condition) {
  return {
    label: label,
    priority: priority,
    executor: executor,
    condition: condition,
  }
}

/**
 * Prints to uo client info
 *
 * @param {Action} action - callee
 * @param {string} msg - message to print
 */
const printAction = function (action, msg) {
  print('[' + action.label + ']: ' + msg)
}

/**
 * @type {Action} Crafting action
 *
 * Condition is - "true", so always should execute
 * Executor uses tool from {global.toolType} waits for
 * Gump and uses info from {global.currentCraftable}
 */
const craftAction = function () {
  const executor = function (global) {
    const craftable = global.currentCraftable

    Orion.UseType(global.toolType)
    Orion.WaitGump(Orion.CreateGumpHook(craftable.craftItemButton))
  }

  const condition = function (global) {
    const craftable = global.currentCraftable
    const ingotsCount = Orion.Count(CONSTANTS.TYPES.INGOT, 0x0)
    const tools = Orion.FindType(global.toolType)
    printAction(
      this,
      'toolsCount ' + tools.length + ' ingotsCount: ' + ingotsCount
    )
    return tools.length && ingotsCount >= craftable.ingotsMin
  }

  return action('Craft Action', PRIORITIES.LOW, executor, condition)
}

/** @type {Action} Hide Character */
const hideAction = function () {
  const executor = function () {
    Orion.UseSkill('Hiding')
    Orion.Wait(10000)
  }

  const condition = function () {
    return !Player.Hidden()
  }

  return action('Hide', PRIORITIES.HIGH, executor, condition)
}

/** @type {Action} Character is Dead*/
const deadAction = function () {
  const executor = function () {
    Orion.PauseScript()
  }

  const condition = function () {
    return Player.Dead()
  }

  return action('Dead', PRIORITIES.HIGH, executor, condition)
}

/** @type {Action} Smelt crafted item */
const smeltCraftedAction = function () {
  const executor = function (global) {
    const craftable = global.currentCraftable
    const list = Orion.FindType(craftable.type)

    printAction(this, list.length)

    if (list.length) {
      list.forEach(function (el) {
        Orion.UseType(global.toolType)
        Orion.WaitTargetObject(el)
        Orion.WaitGump(Orion.CreateGumpHook(global.smeltButton))
        Orion.Wait(CONSTANTS.WAIT_TIME.SHORT)
      })
    }
  }

  const condition = function (global) {
    const craftable = global.currentCraftable
    const list = Orion.FindType(craftable.type)

    printAction(this, list.length)
    return list.length
  }

  return action('smelt crafter', PRIORITIES.MEDIUM, executor, condition)
}

/**@type {Action} Aproaching the Anvil to start Crafting */
const approachAnvilAction = function () {
  const executor = function (global) {
    const coords = global.anvilCoordinates
    Orion.WalkTo(coords.x, coords.y, coords.z, 1)
  }

  const condition = function (global) {
    const dist = Orion.GetDistance(
      global.anvilCoordinates.x,
      global.anvilCoordinates.y
    )
    return dist > 1
  }

  return action('ApproachAnvil', PRIORITIES.HIGH, executor, condition)
}
/**
 * @typedef {Object} Craftable
 * @property {string} label - Name of Item
 * @property {number} type - serial {0x1234}
 */
var Craftable = {
  label: 'item label',
  type: 0,
}

/** @type {Craftable} */
const RingmailGlovesCraftable = {
  label: 'ringmail gloves',
  ingotsMin: 10,
  type: 0x13eb,
  craftItemButton: 2,
}

/** @type {Craftable} */
const RingmailSleevesCraftable = {
  label: 'ringmail sleeves',
  ingotsMin: 14,
  type: 0x13ee,
  craftItemButton: 16,
}

/**
 * Priority Queue base crafter
 */
const scriptRunner = function () {
  const actions = { 0: [], 1: [], 2: [] }
  var runsCount = 0

  /* TextWindow.Open();
  const gump = Orion.GetLastGump();
  TextWindow.Print(gump.TextList())
  TextWindow.Print(gump.ButtonList())*/

  const global = {
    tinkerTool: CONSTANTS.TYPES.TINKER_TOOLS,
    toolTinkerButton: CONSTANTS.TINKER_GUMP.HAMMER_BUTTON,
    toolType: CONSTANTS.TYPES.HAMMER,
    currentCraftable: RingmailSleevesCraftable,
    anvilCoordinates: { x: 2571, y: 482, z: 0 },
    runsCount: function () {
      return runsCount.valueOf()
    },
    smeltButton: CONSTANTS.BS_GUMP.SMELT_BUTTON,
  }
  run = function () {
    runsCount++
    var action
    Object.keys(actions).forEach(function (prio) {
      while (actions[prio] && actions[prio].length) {
        action = actions[prio].pop()

        if (action && typeof action.executor === 'function') {
          if (
            typeof action.condition === 'function' &&
            action.condition(global)
          ) {
            printAction(action, 'condition met, executing...')
            action.executor(global)
          } else {
            printAction(action, 'condition NOT met, skipping...')
          }
        }
      }
    })
  }
  registerAction = function (action) {
    const cd = action()
    print(
      '[ScrpiptRunner] Registering action ' +
        cd.label +
        ' with prio: ' +
        cd.priority
    )
    actions[cd.priority].push(cd)
  }
  registerActions = function (actions) {
    if (actions && actions.length) {
      actions.reverse().forEach(function (action) {
        registerAction(action)
      })
    }
  }

  return this
}

function blacksmithyScript() {
  const runner = scriptRunner()
  runner.registerActions([
    hideAction,
    deadAction,
    approachAnvilAction,
    smeltCraftedAction,
    craftAction,
  ])

  runner.run()
}

/**
 * Crafting table from the Guide for blacksmity training
30 - 40	Mace (6), Chain Coif (10), Ringmail Sleeves (14)
40 - 45	Mace (6), Maul (10), Ringmail Leggings, Ringmail Tunic
45 - 50	Cutlass (8), Viking Sword, Hammer Pick, Heater Shield
50 - 55	Scimitar, Double Axe, Long Sword, Large Battle Axe, War Mace, Bardiche
55 - 60	Kryss (8), Broad Sword, Axe, Executioner's Axe, War Hammer, Two-Handed Axe, Chainmail Leggings
60 - 65	War Fork, Close Helm, Helmet, Nose Helm, War Axe, Chainmail Tunic, Halberd
65 - 70	Short Spear (6), Katana (8), Female Plate Armor (20)
70 - 75	Spear (12), Short Spear (6)
75 - 80	Plate Gorget (10), Short Spear (6)
80 - 85	Plate Gloves (12), Circlet (6)
85 - 90	Plate Helm (15), Plate Arms (18), Circlet (6)
90 - 97	Plate Legs (20), Circlet (6)
97 - 120	Plate Hiro Sode (16), Royal Circlet (6)
 */
