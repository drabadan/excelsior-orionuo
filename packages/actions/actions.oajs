//#include C:\Users\49160\dev\uo\scripts\orion_uo\uoex\excelsior-orionuo\packages\actions\utils.oajs

/**
 * @callback Predicate
 * @returns {boolean}
 *
 * @typedef {Object} Action
 * @property {string} label
 * @property {number} priority
 * @property {Function} executor
 * @property {Predicate} condition
 */
var Action = {
  label: '',
  priority: -1,
  executor: function () {},
  condition: function () {
    return false
  },
}

/**
 * Action constructor
 *
 * @param {string} label name of the Action
 * @param {number} priority priority in running High - 0, Medium - 1, Low - 2
 * @param {Function} executor something that should be done by script,
 * ie - to Hide (use skill Hiding)
 * @param {Function} condition getter for some conditional expression,
 * if condition is met then executor will run itself, else - log that it's skipped
 * @returns {Action} Action
 */
const action = function (label, priority, executor, condition) {
  return {
    label: label,
    priority: priority,
    executor: executor,
    condition: condition,
  }
}

/** @type {Action} Stop Action for script */
const stopAction = function () {
  const executor = function (global) {
    global.stopFlag = true
  }

  const condition = function (global) {
    const ingotsCount = Orion.Count(CONSTANTS.TYPES.INGOT, 0x0)
    const craftable = global.currentCraftable

    return craftable.ingotsMin > ingotsCount || Player.Dead()
  }

  return action('Not enough ressources', PRIORITIES.HIGH, executor, condition)
}

/**
 * @type {Action} Crafting action
 *
 * Executor uses tool from {global.toolType} waits for
 * Gump and uses info from {global.currentCraftable}
 */
const craftAction = function () {
  const executor = function (global) {
    const craftable = global.currentCraftable

    Orion.UseType(global.toolType)
    Orion.WaitGump(Orion.CreateGumpHook(craftable.craftItemButton))
    Orion.Wait(CONSTANTS.WAIT_TIME.SHORT)
  }

  const condition = function (global) {
    const craftable = global.currentCraftable
    const ingotsCount = Orion.Count(CONSTANTS.TYPES.INGOT, 0x0)
    const tools = Orion.FindType(global.toolType)
    printAction(
      this,
      'toolsCount ' + tools.length + ' ingotsCount: ' + ingotsCount
    )
    return tools.length && ingotsCount >= craftable.ingotsMin
  }

  return action('Craft Action', PRIORITIES.LOW, executor, condition)
}

/** @type {Action} Hide Character */
const hideAction = function () {
  const executor = function () {
    Orion.UseSkill('Hiding')
    Orion.Wait(10000)
  }

  const condition = function () {
    return !Player.Hidden()
  }

  return action('Hide', PRIORITIES.HIGH, executor, condition)
}

/** @type {Action} Character is Dead*/
const deadAction = function () {
  const executor = function () {
    Orion.PauseScript()
  }

  const condition = function () {
    return Player.Dead()
  }

  return action('Dead', PRIORITIES.HIGH, executor, condition)
}

/** @type {Action} Smelt crafted item */
const smeltCraftedAction = function () {
  const executor = function (global) {
    const craftable = global.currentCraftable
    const list = Orion.FindType(craftable.type)

    printAction(this, list.length)

    if (list.length) {
      list.forEach(function (el) {
        Orion.UseType(global.toolType)
        Orion.WaitTargetObject(el)
        Orion.WaitGump(Orion.CreateGumpHook(global.smeltButton))
        Orion.Wait(CONSTANTS.WAIT_TIME.SHORT)
      })
    }
  }

  const condition = function (global) {
    const craftable = global.currentCraftable
    const list = Orion.FindType(craftable.type)

    printAction(this, list.length)
    return list.length
  }

  return action('smelt crafter', PRIORITIES.MEDIUM, executor, condition)
}

/**@type {Action} Aproaching the Anvil to start Crafting */
const approachAnvilAction = function () {
  const executor = function (global) {
    const coords = global.anvilCoordinates
    Orion.WalkTo(coords.x, coords.y, coords.z, 1)
  }

  const condition = function (global) {
    const dist = Orion.GetDistance(
      global.anvilCoordinates.x,
      global.anvilCoordinates.y
    )
    return dist > 1
  }

  return action('ApproachAnvil', PRIORITIES.HIGH, executor, condition)
}
