//#include utils.oajs

const setCurrentMiningSpotAction = function (global) {
  if (
    global.harvestingSpots.tiles.length - 1 <=
    global.harvestingSpots.currentTileIndex
  ) {
    global.harvestingSpots.currentTileIndex = 0
  } else if (global.harvestingSpots.currentTileIndex < 0) {
    global.harvestingSpots.currentTileIndex = 0
  } else {
    global.harvestingSpots.currentTileIndex++
  }

  if (
    typeof global.harvestingSpots.tiles[
      global.harvestingSpots.currentTileIndex
    ] === 'undefined'
  ) {
    return print('CRITICAL NextTile is undefined')
  }

  const nextTile =
    global.harvestingSpots.tiles[global.harvestingSpots.currentTileIndex]

  if (
    typeof nextTile !== 'undefined' &&
    global.harvestingSpots.checkDepletionDelay &&
    global.harvestingSpots.doneTiles
  ) {
    const lastDepletion =
      global.harvestingSpots.doneTiles[nextTile.X() + '__' + nextTile.Y()]

    const availableAt = lastDepletion + global.harvestingSpots.depletionDelay

    if (lastDepletion && availableAt > Date.now()) {
      const availableInMin = (availableAt - Date.now()) / 1000 / 60
      print(
        'Depletion delay, too soon to mine: ' +
          nextTile.X() +
          '__' +
          nextTile.Y() +
          '; remaining delay time: ' +
          Math.round(availableInMin) +
          ' minutes'
      )
      Orion.Wait(50)
      return setCurrentMiningSpotAction(global)
    }
  }
  global.harvestingSpots.currentTile = nextTile
}

const loadDoneTiles = function (global) {
  const file = Orion.NewFile()
  if (file.Open(global.sessionLogFileName)) {
    print('File Opened Successfuly')
    var data = file.ReadAll()
    if (data) {
      data = JSON.parse(data)
      if (data.doneTiles) {
        print('Done tiles len: ' + Object.keys(data.doneTiles).length)
        global.harvestingSpots.doneTiles = data.doneTiles
      }
    }

    file.Remove()
  }
}
